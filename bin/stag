#!/usr/bin/env node
var stag = require("../"),
    path = require("path"),
    rw = require("rw"),
    request = require("request"),
    enhance = require("swagger-enhance"),
    async = require("async"),
    multiline = require("multiline"),
    yargs = require("yargs")
      .usage(multiline(function() {/*
Swagger static generator version $v:

  stag [ options ] <url> [ <template> [ <output> ] ]

  <url> is a Swagger-compliant JSON URL, e.g.
    http://petstore.swagger.wordnik.com/api/api-docs

  <template> is either:
    1. a relative filename,
    2. a template name in one of the template paths indicated by one or more -p
       or --path options, or
    3. empty, "-" or "/dev/stdin" to read the template from stdin

  <output> is an optional filename to which the rendered template should be
    written, or a directory to which multiple files should be written if
    --dir is specified. If left off, the output will be written to stdout.

Examples:

  Use only positional arguments:
  $ swagger-static $API_URL template.html output.html

  Produce output on stdout and redirect to a file:
  $ swagger-static $API_URL template.html > output.html

  Provide the template on stdin, output on stdout:
  $ echo "{{ swaggerVersion }}" | swagger-static $API_URL

      */}).replace("$v", stag.version))
      .demand(1)
      .boolean("help")
        .alias("h", "help")
      .boolean("d")
        .alias("d", "dir")
        .describe("d", "process <template> as a directory of files")
      .string("p")
        .alias("p", "path")
        .describe("p", "add this directory to the list of template paths")
      .boolean("a")
        .alias("a", "autoescape")
        .describe("a", "auto-escape HTML in template tags")
      .boolean("E")
        .alias("E", "enhanced")
        .describe("E", "indicates that the Swagger JSON is already 'enhanced'")
      .boolean("e")
        .alias("e", "encoding")
        .describe("e", "when reading the template from stdin, use this encoding (default: 'utf8')")
      .version(stag.version, "v", "print the version number and exit")
      .wrap(80)
      .check(function checkArgs(argv) {
        if (argv.help) {
          yargs.showHelp();
          process.exit(1);
        }
        if (!Array.isArray(argv.path)) {
          argv.path = argv.path ? [argv.path] : [];
        }
        argv.encoding = argv.encoding || "utf8";
      });

var options = yargs.argv,
    argc = options._,
    STDIN = "/dev/stdin",
    STDOUT = "/dev/stdout";

main(
  argc.shift(),
  dash(argc.shift(), STDIN),
  argc.shift() || STDOUT,
  options
);

function main(url, template, output, options) {
  var paths = ["."].concat(options.path),
      env = new stag.Environment(paths, {
        autoescape: options.autoescape
      }),
      fileOptions = {
        encoding: options.encoding
      };

  // LOG("template paths:", options.path);

  var read = options.enhanced
    ? readEnhancedURL
    : readPlainURL;

  var render = options.dir
    ? renderDirectory
    : (template === STDIN)
      ? renderString
      : renderFile;

  return async.waterfall([
    function(done) { done(null, url); },
    read,
    render
  ], function allDone(error) {
    if (error) {
      return ERROR(error);
    }
    LOG("all done!");
    process.exit(0);
  });

  function readPlainURL(url, done) {
    LOG("reading and enhancing JSON from:", url);
    return enhance.url(url, done);
  }

  function readEnhancedURL(url, done) {
    LOG("reading (enhanced) JSON from:", url);
    request(url, function onRequest(error, response, body) {
      if (error || response.statusCode !== 200) return done(error);
      done(null, JSON.parse(body));
    });
  }

  function renderString(data, done) {
    LOG("reading template from stdin...");
    return rw.readFile(template, fileOptions, function onReadStdin(error, str) {
      if (error) return done(error);
      env.renderString(str, data, function onRender(error, content) {
        if (error) return done(error);
        rw.writeFile(output, content, "utf8", done);
      });
    });
  }

  function renderFile(data, done) {
    LOG("rendering from template:", template);
    return env.render(template, data, function onRender(error, content) {
      if (error) return done(error);
      rw.writeFile(output, content, "utf8", done);
    });
  }

  function renderDirectory(data, done) {
    LOG("rendering directory:", template, "->", output);
    return env.renderDirectory(template, output, data, done)
      .on("render", function(infile, outfile) {
        LOG("+ rendered:", infile, "->", outfile);
      });
  }
}

function dash(path, def) {
  return path === "-" ? def : path || def;
}

function LOG() {
  console.warn.apply(console, arguments);
}

function ERROR() {
  console.error.apply(console, arguments);
  process.exit(1);
}
